import numpy as np
import pytest
import yast
from yast.tensor._auxliary import _config
try:
    from .configs import config_dense, config_U1, config_U1_force, config_Z2xU1, config_U1xU1
except ImportError:
    from configs import config_dense, config_U1, config_Z2xU1, config_U1_force, config_U1xU1

tol = 1e-12  #pylint: disable=invalid-name


def test_tensordot_u1xu1():
    loc_c= config_U1xU1
    loc_c= loc_c if isinstance(loc_c, _config) else _config(**{a: getattr(loc_c, a) for a in _config._fields if hasattr(loc_c, a)})
    loc_c= loc_c._replace(default_dtype="complex128")
    t1_data= np.random.randn(2157759)+1.0j*np.random.randn(2157759)
    R= yast.load_from_dict(loc_c,\
        {'_d': t1_data,'s': (-1, -1), 'n': (0, 0), 't': ((-8, 0, 8, 0), (-7, -3, 7, 3), (-7, 3, 7, -3), (-6, -6, 6, 6), (-6, 0, 6, 0), (-6, 6, 6, -6), (-5, -9, 5, 9), (-5, -3, 5, 3), (-5, 3, 5, -3), (-5, 9, 5, -9), (-4, -12, 4, 12), (-4, -6, 4, 6), (-4, 0, 4, 0), (-4, 6, 4, -6), (-4, 12, 4, -12), (-3, -9, 3, 9), (-3, -3, 3, 3), (-3, 3, 3, -3), (-3, 9, 3, -9), (-2, -12, 2, 12), (-2, -6, 2, 6), (-2, 0, 2, 0), (-2, 6, 2, -6), (-2, 12, 2, -12), (-1, -9, 1, 9), (-1, -3, 1, 3), (-1, 3, 1, -3), (-1, 9, 1, -9), (0, -12, 0, 12), (0, -6, 0, 6), (0, 0, 0, 0), (0, 6, 0, -6), (0, 12, 0, -12), (1, -9, -1, 9), (1, -3, -1, 3), (1, 3, -1, -3), (1, 9, -1, -9), (2, -12, -2, 12), (2, -6, -2, 6), (2, 0, -2, 0), (2, 6, -2, -6), (2, 12, -2, -12), (3, -9, -3, 9), (3, -3, -3, 3), (3, 3, -3, -3), (3, 9, -3, -9), (4, -12, -4, 12), (4, -6, -4, 6), (4, 0, -4, 0), (4, 6, -4, -6), (4, 12, -4, -12), (5, -9, -5, 9), (5, -3, -5, 3), (5, 3, -5, -3), (5, 9, -5, -9), (6, -6, -6, 6), (6, 0, -6, 0), (6, 6, -6, -6), (7, -3, -7, 3), (7, 3, -7, -3), (8, 0, -8, 0)), 'D': ((1, 1), (4, 4), (4, 4), (6, 6), (24, 24), (6, 6), (4, 4), (52, 52), (52, 52), (4, 4), (1, 1), (52, 52), (160, 160), (52, 52), (1, 1), (24, 24), (228, 228), (228, 228), (24, 24), (4, 4), (160, 160), (456, 456), (160, 160), (4, 4), (52, 52), (456, 456), (456, 456), (52, 52), (6, 6), (228, 228), (639, 639), (228, 228), (6, 6), (52, 52), (456, 456), (456, 456), (52, 52), (4, 4), (160, 160), (456, 456), (160, 160), (4, 4), (24, 24), (228, 228), (228, 228), (24, 24), (1, 1), (52, 52), (160, 160), (52, 52), (1, 1), (4, 4), (52, 52), (52, 52), (4, 4), (6, 6), (24, 24), (6, 6), (4, 4), (4, 4), (1, 1)), 'isdiag': False, 'mfs': ((1,), (1,)), 'hfs': [{'tree': (4, 2, 1, 1, 2, 1, 1), 's': (-1, -1, -1, 1, -1, -1, 1), 't': (((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0))), 'D': ((1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1), (1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1))}, {'tree': (4, 2, 1, 1, 2, 1, 1), 's': (-1, -1, -1, 1, -1, -1, 1), 't': (((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0))), 'D': ((1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1), (1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1))}], 'SYM_ID': 'U(1)xU(1)', 'fermionic': False})
    t2_data= np.random.randn(2157759)+1.0j*np.random.randn(2157759)
    Rt= yast.load_from_dict(loc_c,\
        {'_d': t2_data,'s': (1, 1), 'n': (0, 0), 't': ((-8, 0, 8, 0), (-7, -3, 7, 3), (-7, 3, 7, -3), (-6, -6, 6, 6), (-6, 0, 6, 0), (-6, 6, 6, -6), (-5, -9, 5, 9), (-5, -3, 5, 3), (-5, 3, 5, -3), (-5, 9, 5, -9), (-4, -12, 4, 12), (-4, -6, 4, 6), (-4, 0, 4, 0), (-4, 6, 4, -6), (-4, 12, 4, -12), (-3, -9, 3, 9), (-3, -3, 3, 3), (-3, 3, 3, -3), (-3, 9, 3, -9), (-2, -12, 2, 12), (-2, -6, 2, 6), (-2, 0, 2, 0), (-2, 6, 2, -6), (-2, 12, 2, -12), (-1, -9, 1, 9), (-1, -3, 1, 3), (-1, 3, 1, -3), (-1, 9, 1, -9), (0, -12, 0, 12), (0, -6, 0, 6), (0, 0, 0, 0), (0, 6, 0, -6), (0, 12, 0, -12), (1, -9, -1, 9), (1, -3, -1, 3), (1, 3, -1, -3), (1, 9, -1, -9), (2, -12, -2, 12), (2, -6, -2, 6), (2, 0, -2, 0), (2, 6, -2, -6), (2, 12, -2, -12), (3, -9, -3, 9), (3, -3, -3, 3), (3, 3, -3, -3), (3, 9, -3, -9), (4, -12, -4, 12), (4, -6, -4, 6), (4, 0, -4, 0), (4, 6, -4, -6), (4, 12, -4, -12), (5, -9, -5, 9), (5, -3, -5, 3), (5, 3, -5, -3), (5, 9, -5, -9), (6, -6, -6, 6), (6, 0, -6, 0), (6, 6, -6, -6), (7, -3, -7, 3), (7, 3, -7, -3), (8, 0, -8, 0)), 'D': ((1, 1), (4, 4), (4, 4), (6, 6), (24, 24), (6, 6), (4, 4), (52, 52), (52, 52), (4, 4), (1, 1), (52, 52), (160, 160), (52, 52), (1, 1), (24, 24), (228, 228), (228, 228), (24, 24), (4, 4), (160, 160), (456, 456), (160, 160), (4, 4), (52, 52), (456, 456), (456, 456), (52, 52), (6, 6), (228, 228), (639, 639), (228, 228), (6, 6), (52, 52), (456, 456), (456, 456), (52, 52), (4, 4), (160, 160), (456, 456), (160, 160), (4, 4), (24, 24), (228, 228), (228, 228), (24, 24), (1, 1), (52, 52), (160, 160), (52, 52), (1, 1), (4, 4), (52, 52), (52, 52), (4, 4), (6, 6), (24, 24), (6, 6), (4, 4), (4, 4), (1, 1)), 'isdiag': False, 'mfs': ((1,), (1,)), 'hfs': [{'tree': (4, 2, 1, 1, 2, 1, 1), 's': (1, 1, 1, -1, 1, 1, -1), 't': (((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0))), 'D': ((1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1), (1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1))}, {'tree': (4, 2, 1, 1, 2, 1, 1), 's': (1, 1, 1, -1, 1, 1, -1), 't': (((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0))), 'D': ((1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1), (1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1))}], 'SYM_ID': 'U(1)xU(1)', 'fermionic': False})
    
    t3_data= np.random.randn(2157759)+1.0j*np.random.randn(2157759)
    R3= yast.load_from_dict(loc_c,\
        {'_d': t3_data,'s': (-1, -1), 'n': (0, 0), 't': ((-8, 0, 8, 0), (-7, -3, 7, 3), (-7, 3, 7, -3), (-6, -6, 6, 6), (-6, 0, 6, 0), (-6, 6, 6, -6), (-5, -9, 5, 9), (-5, -3, 5, 3), (-5, 3, 5, -3), (-5, 9, 5, -9), (-4, -12, 4, 12), (-4, -6, 4, 6), (-4, 0, 4, 0), (-4, 6, 4, -6), (-4, 12, 4, -12), (-3, -9, 3, 9), (-3, -3, 3, 3), (-3, 3, 3, -3), (-3, 9, 3, -9), (-2, -12, 2, 12), (-2, -6, 2, 6), (-2, 0, 2, 0), (-2, 6, 2, -6), (-2, 12, 2, -12), (-1, -9, 1, 9), (-1, -3, 1, 3), (-1, 3, 1, -3), (-1, 9, 1, -9), (0, -12, 0, 12), (0, -6, 0, 6), (0, 0, 0, 0), (0, 6, 0, -6), (0, 12, 0, -12), (1, -9, -1, 9), (1, -3, -1, 3), (1, 3, -1, -3), (1, 9, -1, -9), (2, -12, -2, 12), (2, -6, -2, 6), (2, 0, -2, 0), (2, 6, -2, -6), (2, 12, -2, -12), (3, -9, -3, 9), (3, -3, -3, 3), (3, 3, -3, -3), (3, 9, -3, -9), (4, -12, -4, 12), (4, -6, -4, 6), (4, 0, -4, 0), (4, 6, -4, -6), (4, 12, -4, -12), (5, -9, -5, 9), (5, -3, -5, 3), (5, 3, -5, -3), (5, 9, -5, -9), (6, -6, -6, 6), (6, 0, -6, 0), (6, 6, -6, -6), (7, -3, -7, 3), (7, 3, -7, -3), (8, 0, -8, 0)), 'D': ((1, 1), (4, 4), (4, 4), (6, 6), (24, 24), (6, 6), (4, 4), (52, 52), (52, 52), (4, 4), (1, 1), (52, 52), (160, 160), (52, 52), (1, 1), (24, 24), (228, 228), (228, 228), (24, 24), (4, 4), (160, 160), (456, 456), (160, 160), (4, 4), (52, 52), (456, 456), (456, 456), (52, 52), (6, 6), (228, 228), (639, 639), (228, 228), (6, 6), (52, 52), (456, 456), (456, 456), (52, 52), (4, 4), (160, 160), (456, 456), (160, 160), (4, 4), (24, 24), (228, 228), (228, 228), (24, 24), (1, 1), (52, 52), (160, 160), (52, 52), (1, 1), (4, 4), (52, 52), (52, 52), (4, 4), (6, 6), (24, 24), (6, 6), (4, 4), (4, 4), (1, 1)), 'isdiag': False, 'mfs': ((1,), (1,)), 'hfs': [{'tree': (4, 2, 1, 1, 2, 1, 1), 's': (-1, -1, -1, 1, -1, -1, 1), 't': (((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0))), 'D': ((1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1), (1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1))}, {'tree': (4, 2, 1, 1, 2, 1, 1), 's': (-1, -1, -1, 1, -1, -1, 1), 't': (((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-4, 0), (-3, -3), (-3, 3), (-2, -6), (-2, 0), (-2, 6), (-1, -3), (-1, 3), (0, -6), (0, 0), (0, 6), (1, -3), (1, 3), (2, -6), (2, 0), (2, 6), (3, -3), (3, 3), (4, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0)), ((-2, 0), (-1, -3), (-1, 3), (0, 0), (1, -3), (1, 3), (2, 0))), 'D': ((1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1), (1, 2, 2, 1, 8, 1, 8, 8, 2, 15, 2, 8, 8, 1, 8, 1, 2, 2, 1), (1, 1, 1, 3, 1, 1, 1), (1, 1, 1, 3, 1, 1, 1))}], 'SYM_ID': 'U(1)xU(1)', 'fermionic': False})

    X= R.tensordot(Rt.transpose((1,0)), (1,0))
    Y= R.tensordot(Rt, (1,1))
    assert (X-Y).norm() < tol

    X= R.tensordot(R3, (0,1), conj=(0,1))
    Y= R.tensordot(R3.conj(), (0,1))
    assert (X-Y).norm() < tol

    X= R.tensordot(R3, (1,1), conj=(0,1))
    Y= R.tensordot(R3.conj(), (1,1))
    assert (X-Y).norm() < tol

    X= R.tensordot(R3.transpose((1,0)), (1,0), conj=(0,1))
    # yast.clear_cache()
    Y= R.tensordot(R3, (1,1), conj=(0,1))
    assert (X-Y).norm() < tol

    M= yast.tensordot(R.transpose((1,0)), Rt, (1,0))

    U, S, Vh= yast.linalg.svd(M, (0,1), sU=1, keep_multiplets=True, D_total=64,\
                tol=1.0e-8, tol_block=1.0e-8, diagnostics=None)

    X= Rt.tensordot(Vh.transpose((1,0)), (1,0), conj=(0,1))
    Y= Rt.tensordot(Vh, (1,1), conj=(0,1))
    assert (X-Y).norm() < tol

if __name__ == '__main__':
    test_tensordot_u1xu1()
